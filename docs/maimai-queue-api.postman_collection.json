{
  "info": {
    "name": "Maimai Queue Management API",
    "description": "Complete API collection for the Maimai Queue Management System. This collection includes all endpoints for managing queue operations, player status, scheduling, and system administration.\n\n**Features:**\n- Queue management (add, update, remove players)\n- Player status management (waiting, processing, AFK, completed)\n- Automated scheduling and daily completion\n- Real-time queue statistics and history\n- System administration and debugging\n\n**Getting Started:**\n1. Update the base URL in collection variables\n2. Run the 'Get Queue Status' request to verify connectivity\n3. Use 'Add Player to Queue' to start testing\n\n**Environment Variables:**\n- `base_url`: Your API base URL (default: http://localhost:3000/api)\n- `queue_item_id`: Dynamically set from responses for testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "maimai-queue-api-collection",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "queue_item_id",
      "value": "",
      "type": "string",
      "description": "Queue item ID for testing (auto-populated)"
    }
  ],
  "item": [
    {
      "name": "Queue Management",
      "item": [
        {
          "name": "Get Queue Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has queue and currentNumber\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('queue');",
                  "    pm.expect(jsonData).to.have.property('currentNumber');",
                  "});",
                  "",
                  "// Store first queue item ID for other tests",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.queue && jsonData.queue.length > 0) {",
                  "    pm.collectionVariables.set('queue_item_id', jsonData.queue[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "Retrieves all active queue items (waiting, processing, AFK) with their current positions and the next queue number."
          },
          "response": []
        },
        {
          "name": "Add Single Player to Queue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains queue item data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name1');",
                  "    pm.expect(jsonData).to.have.property('status', 'waiting');",
                  "});",
                  "",
                  "// Store the new queue item ID",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('queue_item_id', jsonData.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name1\": \"Alice\",\n  \"notes\": \"Single player test\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "Adds a single player to the queue with optional notes."
          },
          "response": []
        },
        {
          "name": "Add Duo Players to Queue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains both player names\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name1', 'Bob');",
                  "    pm.expect(jsonData).to.have.property('name2', 'Charlie');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name1\": \"Bob\",\n  \"name2\": \"Charlie\",\n  \"notes\": \"Duo players - friends playing together\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "Adds two players to the queue as a duo entry."
          },
          "response": []
        },
        {
          "name": "Reorder Queue Items",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"updates\": [\n    {\n      \"id\": 1,\n      \"position\": 2\n    },\n    {\n      \"id\": 2,\n      \"position\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/reorder",
              "host": ["{{base_url}}"],
              "path": ["queue", "reorder"]
            },
            "description": "Bulk reorder multiple queue items. Useful for drag-and-drop implementations."
          },
          "response": []
        },
        {
          "name": "Reset Queue (Daily Completion)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains completion info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('completed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/queue/reset",
              "host": ["{{base_url}}"],
              "path": ["queue", "reset"]
            },
            "description": "Marks all active queue items as completed. Typically used for daily reset operations."
          },
          "response": []
        }
      ],
      "description": "Core queue operations including adding players, reordering, and resetting the queue."
    },
    {
      "name": "Player Management",
      "item": [
        {
          "name": "Get Specific Player",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains queue item data\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Retrieves details of a specific queue item by ID."
          },
          "response": []
        },
        {
          "name": "Start Processing Player",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player status is processing\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'processing');",
                  "    pm.expect(jsonData).to.have.property('processingStartedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Marks a waiting player as currently processing (playing)."
          },
          "response": []
        },
        {
          "name": "Mark Player as AFK",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player status is AFK\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'afk');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"afk\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Marks a player as AFK (Away From Keyboard). AFK players are moved to the bottom of the queue."
          },
          "response": []
        },
        {
          "name": "Return Player from AFK",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player status is waiting\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'waiting');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"waiting\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Returns an AFK player back to waiting status, placing them above other AFK players."
          },
          "response": []
        },
        {
          "name": "Complete Player",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player status is completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'completed');",
                  "    pm.expect(jsonData).to.have.property('completedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Marks a processing player as completed (finished playing)."
          },
          "response": []
        },
        {
          "name": "Cancel Player",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player status is cancelled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'cancelled');",
                  "    pm.expect(jsonData).to.have.property('cancelledAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"cancelled\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Cancels a player's queue entry."
          },
          "response": []
        },
        {
          "name": "Update Player Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Player details updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name1', 'Updated Alice');",
                  "    pm.expect(jsonData).to.have.property('notes', 'Updated notes');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name1\": \"Updated Alice\",\n  \"name2\": \"Updated Bob\",\n  \"notes\": \"Updated notes - player requested name change\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Updates player names and notes without changing status."
          },
          "response": []
        },
        {
          "name": "Update Player Position",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Position updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('position', 3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}/position",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}", "position"]
            },
            "description": "Updates a specific player's position in the queue."
          },
          "response": []
        },
        {
          "name": "Delete Player",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deletion confirmed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message', 'Queue item deleted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue/{{queue_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["queue", "{{queue_item_id}}"]
            },
            "description": "Permanently removes a player from the queue and database."
          },
          "response": []
        }
      ],
      "description": "Individual player operations including status changes, updates, and deletion."
    },
    {
      "name": "Queue Analytics",
      "item": [
        {
          "name": "Get Queue Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains statistics\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalActive');",
                  "    pm.expect(jsonData).to.have.property('waiting');",
                  "    pm.expect(jsonData).to.have.property('processing');",
                  "    pm.expect(jsonData).to.have.property('afk');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue/stats",
              "host": ["{{base_url}}"],
              "path": ["queue", "stats"]
            },
            "description": "Retrieves comprehensive statistics about the current queue status and historical data."
          },
          "response": []
        },
        {
          "name": "Get Queue History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue/history",
              "host": ["{{base_url}}"],
              "path": ["queue", "history"]
            },
            "description": "Retrieves historical data of completed and cancelled queue items."
          },
          "response": []
        }
      ],
      "description": "Analytics and reporting endpoints for queue performance and historical data."
    },
    {
      "name": "Scheduler Management",
      "item": [
        {
          "name": "Get Scheduler Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains scheduler info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('isEnabled');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/scheduler",
              "host": ["{{base_url}}"],
              "path": ["scheduler"]
            },
            "description": "Retrieves the current status of the automated daily completion scheduler."
          },
          "response": []
        },
        {
          "name": "Enable Scheduler",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Scheduler enabled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('currentState', 'enabled');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"enable\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scheduler",
              "host": ["{{base_url}}"],
              "path": ["scheduler"]
            },
            "description": "Enables the automated daily completion scheduler."
          },
          "response": []
        },
        {
          "name": "Disable Scheduler",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Scheduler disabled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('currentState', 'disabled');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"disable\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scheduler",
              "host": ["{{base_url}}"],
              "path": ["scheduler"]
            },
            "description": "Disables the automated daily completion scheduler."
          },
          "response": []
        },
        {
          "name": "Initialize Scheduler",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Scheduler initialized\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/scheduler/init",
              "host": ["{{base_url}}"],
              "path": ["scheduler", "init"]
            },
            "description": "Initializes the scheduler system."
          },
          "response": []
        },
        {
          "name": "Manual Daily Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Daily completion executed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('completed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/cron/complete-daily",
              "host": ["{{base_url}}"],
              "path": ["cron", "complete-daily"]
            },
            "description": "Manually triggers the daily completion process that runs automatically at 10 PM."
          },
          "response": []
        }
      ],
      "description": "Automated scheduler management for daily queue completion tasks."
    },
    {
      "name": "System Settings",
      "item": [
        {
          "name": "Get AFK Exclusion Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains AFK exclusion info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('excludeAfkFromCompletion');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cron/afk-exclusion",
              "host": ["{{base_url}}"],
              "path": ["cron", "afk-exclusion"]
            },
            "description": "Retrieves the current AFK exclusion setting for daily completion."
          },
          "response": []
        },
        {
          "name": "Enable AFK Exclusion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AFK exclusion enabled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('excludeAfkFromCompletion', true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"excludeAfkFromCompletion\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/cron/afk-exclusion",
              "host": ["{{base_url}}"],
              "path": ["cron", "afk-exclusion"]
            },
            "description": "Enables AFK exclusion - AFK players will NOT be marked as completed during daily reset."
          },
          "response": []
        },
        {
          "name": "Disable AFK Exclusion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AFK exclusion disabled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('excludeAfkFromCompletion', false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"excludeAfkFromCompletion\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/cron/afk-exclusion",
              "host": ["{{base_url}}"],
              "path": ["cron", "afk-exclusion"]
            },
            "description": "Disables AFK exclusion - AFK players will be marked as completed during daily reset."
          },
          "response": []
        },
        {
          "name": "Get Debug Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains debug info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cron/debug",
              "host": ["{{base_url}}"],
              "path": ["cron", "debug"]
            },
            "description": "Retrieves system debug information for troubleshooting."
          },
          "response": []
        },
        {
          "name": "Initialize Cron System",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Cron system initialized\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/cron/init",
              "host": ["{{base_url}}"],
              "path": ["cron", "init"]
            },
            "description": "Initializes the cron job system for automated tasks."
          },
          "response": []
        }
      ],
      "description": "System configuration and debugging endpoints."
    },
    {
      "name": "Test Workflows",
      "item": [
        {
          "name": "Complete Player Journey",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This test simulates a complete player journey from joining to completion"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This is a workflow test that simulates a complete player journey",
                  "pm.test(\"Complete workflow test\", function () {",
                  "    pm.expect(true).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "This is a placeholder for workflow testing. Use the Postman Runner to execute multiple requests in sequence."
          },
          "response": []
        }
      ],
      "description": "Workflow tests and integration scenarios."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url.toString());",
          "",
          "// Set timestamp for requests",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct Content-Type', function () {",
          "    if (pm.response.code === 200) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ]
}
